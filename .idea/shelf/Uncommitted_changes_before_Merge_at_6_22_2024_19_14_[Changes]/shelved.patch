Index: src/server.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>const express = require('express');\r\nconst bodyParser = require('body-parser');\r\nconst sql = require('mssql');\r\nconst cors = require('cors');\r\nconst nodemailer = require('nodemailer');\r\nconst bcrypt = require('bcrypt');\r\n\r\nconst app = express();\r\napp.use(bodyParser.json());\r\napp.use(cors());\r\n\r\nconst connectionString = {\r\n    user: 'groupit_admin',\r\n    password: 'Group123it',\r\n    server: 'groupit.database.windows.net',\r\n    database: 'groupit_new',\r\n    options: {\r\n        encrypt: true,\r\n        enableArithAbort: true,\r\n    }\r\n};\r\n\r\n// Set up nodemailer transporter\r\nconst transporter = nodemailer.createTransport({\r\n    service: 'gmail',\r\n    auth: {\r\n        user: 'groupittechnion@gmail.com',  // Replace with your email\r\n        pass: 'ohrr sorx crdj clul'    // Replace with your email password\r\n    }\r\n});\r\n\r\nsql.connect(connectionString, err => {\r\n    if (err) {\r\n        console.error('Database connection error:', err);\r\n    } else {\r\n        console.log('Connected to Azure SQL Database');\r\n    }\r\n});\r\n\r\napp.post('/login', async (req, res) => {\r\n    const {username, password} = req.body;\r\n\r\n    try {\r\n        const result = await sql.query`SELECT *\r\n                                       FROM users_data\r\n                                       WHERE userName = ${username}\r\n                                         AND password = ${password}`;\r\n\r\n        if (result.recordset.length > 0) {\r\n            res.status(200).send({message: 'Login successful'});\r\n        } else {\r\n            res.status(401).send({message: 'Invalid username or password'});\r\n        }\r\n    } catch (err) {\r\n        console.error('Error occurred during login:', err);\r\n        res.status(500).send({ message: 'An error occurred', error: err.message });\r\n    }\r\n});\r\n\r\n// Registration endpoint\r\napp.post('/register', async (req, res) => {\r\n    const { firstName, lastName, birthday, email, username, password } = req.body;\r\n    const createdAt = new Date().toISOString(); // Get the current date and time in ISO format\r\n\r\n    try {\r\n        // Check if the username already exists\r\n        const userResult = await sql.query`SELECT userID FROM users_data WHERE userName = ${username}`;\r\n        if (userResult.recordset.length > 0) {\r\n            return res.status(400).send({ message: 'Username already exists' });\r\n        }\r\n        // Get the next userID\r\n        const userIDResult = await sql.query`SELECT NEXT VALUE FOR dbo.UserIDSequence AS userID`;\r\n        const userID = userIDResult.recordset[0].userID;\r\n        // Insert the new user\r\n        await sql.query`INSERT INTO users_data (userID, firstName, lastName, userName, birthday, email, password, createdAt) \r\n            VALUES (${userID}, ${firstName}, ${lastName}, ${username}, ${birthday}, ${email}, ${password}, ${createdAt})`;\r\n        res.status(201).send({ message: 'Registration successful' });\r\n    } catch (err) {\r\n        console.error('Error occurred during registration:', err);\r\n        res.status(500).send({ message: 'An error occurred', error: err.message });\r\n    }\r\n});\r\n\r\n// Password reset endpoint\r\napp.post('/resetPassword', async (req, res) => {\r\n    const { username, password } = req.body;\r\n\r\n    try {\r\n        // Ensure required fields are present\r\n        if (!username || !password) {\r\n            return res.status(400).send({ message: 'Username and password are required' });\r\n        }\r\n\r\n        console.log('Received username:', username);\r\n\r\n        // Update the user's password in the database\r\n        const result = await sql.query`UPDATE users_data SET password = ${password} WHERE userName = ${username}`;\r\n\r\n        console.log('SQL query result:', result);\r\n\r\n        if (result.rowsAffected[0] > 0) {\r\n            res.status(200).send({ message: 'Password reset successful' });\r\n        } else {\r\n            res.status(404).send({ message: 'User not found' });\r\n        }\r\n    } catch (err) {\r\n        console.error('Error occurred during password reset:', err);\r\n        res.status(500).send({ message: 'An error occurred', error: err.message });\r\n    }\r\n});\r\n\r\n// Endpoint to get top 100 artists with most songs\r\napp.get('/top-artists', async (req, res) => {\r\n    try {\r\n        const result = await sql.query`\r\n            SELECT TOP 100 artistName, COUNT(*) AS song_count\r\n            FROM songs_data\r\n            GROUP BY artistName\r\n            ORDER BY COUNT(*) DESC\r\n        `;\r\n        res.status(200).send(result.recordset);\r\n    } catch (err) {\r\n        console.error('Error fetching top artists:', err);\r\n        res.status(500).send({ message: 'An error occurred', error: err.message });\r\n    }\r\n});\r\n\r\napp.post('/password', async (req, res) => {\r\n    const {username, email} = req.body;\r\n\r\n    try {\r\n        const result = await sql.query`SELECT *\r\n                                       FROM users_data\r\n                                       WHERE userName = ${username}\r\n                                         AND email = ${email}`;\r\n\r\n        if (result.recordset.length > 0) {\r\n            // Send email after successful verification\r\n            const resetPasswordUrl = `http://localhost:3000/resetPassword/${username}`;\r\n\r\n            const mailOptions = {\r\n                from: 'groupittechnion@gmail.com',\r\n                to: email,\r\n                subject: 'Password Reset Verification',\r\n                text: 'You have requested a password reset. Please click the link below to reset your password.',\r\n                html: `<p>You have requested a password reset. Please click the link below to reset your password:</p><a href=\"${resetPasswordUrl}\">Reset Password</a>`\r\n            };\r\n\r\n            transporter.sendMail(mailOptions, (error, info) => {\r\n                if (error) {\r\n                    console.error('Error sending email:', error);\r\n                    return res.status(500).send({ message: 'Error sending email', error: error.message });\r\n                } else {\r\n                    console.log('Email sent:', info.response);\r\n                    return res.status(200).send({ message: 'Verification successful. Email sent.' });\r\n                }\r\n            });\r\n        } else {\r\n            res.status(401).send({message: 'Invalid username or email'});\r\n        }\r\n    } catch (err) {\r\n        console.error('Error occurred during login:', err);\r\n        res.status(500).send({message: 'An error occurred', error: err.message});\r\n    }\r\n});\r\n\r\napp.get('/api/user-data/:username', async (req, res) => {\r\n    const { username } = req.params;\r\n\r\n    try {\r\n        const result = await sql.query`SELECT firstName, lastName, userName, email, birthday, password, userID FROM users_data WHERE userName = ${username}`;\r\n\r\n        if (result.recordset.length > 0) {\r\n            res.status(200).send(result.recordset[0]);\r\n        } else {    \r\n            res.status(404).send({ message: 'User not found' });\r\n        }\r\n    } catch (err) {\r\n        console.error('Error fetching user data:', err);\r\n        res.status(500).send({ message: 'An error occurred', error: err.message });\r\n    }\r\n});\r\n\r\n// Fetch all users endpoint\r\napp.get('/usersList', async (req, res) => {\r\n    try {\r\n        const result = await sql.query`SELECT userID, userName FROM users_data`;\r\n        const users = result.recordset.map(user => ({ userID: user.userID, userName: user.userName }));\r\n        res.status(200).json(users);\r\n    } catch (err) {\r\n        console.error('Error fetching users:', err);\r\n        res.status(500).send({ message: 'An error occurred', error: err.message });\r\n    }\r\n});\r\n\r\n\r\n// Add user to group endpoint\r\napp.post('/addUserByUserName', async (req, res) => {\r\n    const { userName, groupId } = req.body;\r\n    try {\r\n        const groupResult = await sql.query`SELECT groupID FROM groups_data WHERE groupID = ${groupId}`;\r\n        if (groupResult.recordset.length === 0) {\r\n            return res.status(404).send({ message: 'Group not found' });\r\n        }\r\n\r\n        const userResult = await sql.query`SELECT userID FROM users_data WHERE userName = ${userName}`;\r\n        if (userResult.recordset.length === 0) {\r\n            return res.status(404).send({ message: 'User not found' });\r\n        }\r\n\r\n        const userID = userResult.recordset[0].userID;\r\n        await sql.query`INSERT INTO group_user (groupID, userID) VALUES (${groupId}, ${userID})`;\r\n\r\n        res.status(200).send({ message: 'User added to group successfully' });\r\n    } catch (err) {\r\n        console.error('Error adding user to group:', err);\r\n        res.status(500).send({ message: 'An error occurred', error: err.message });\r\n    }\r\n});\r\n\r\n// Fetch group members endpoint\r\napp.post('/groupMembers', async (req, res) => {\r\n    const { groupId } = req.body;\r\n\r\n    try {\r\n        // Ensure the pool is connected\r\n        await sql.connect(connectionString);\r\n\r\n        // Get user IDs for the group\r\n        const groupUsersResult = await sql.query`\r\n            SELECT userID \r\n            FROM group_user \r\n            WHERE groupID = ${groupId}\r\n        `;\r\n\r\n        const userIds = groupUsersResult.recordset.map(row => row.userID);\r\n\r\n        if (userIds.length === 0) {\r\n            return res.json([]); // Return an empty array if no users found\r\n        }\r\n\r\n        // Get user names from user IDs\r\n        const usersResult = await sql.query`\r\n            SELECT userName \r\n            FROM users_data \r\n            WHERE userID IN (${userIds})\r\n        `;\r\n        \r\n        const userNames = usersResult.recordset.map(row => row.userName);\r\n\r\n        res.json(userNames);\r\n    } catch (error) {\r\n        console.error('Error fetching group members:', error);\r\n        res.status(500).send({ message: 'Internal Server Error', error: error.message });\r\n    }\r\n});\r\n\r\n\r\n\r\napp.get('/api/search-users', async (req, res) => {\r\n    const { username } = req.query;\r\n\r\n    try {\r\n        const result = await sql.query`SELECT userName FROM users_data WHERE userName LIKE ${username + '%'}`;\r\n        res.status(200).send({ users: result.recordset });\r\n    } catch (err) {\r\n        console.error('Error searching users:', err);\r\n        res.status(500).send({ message: 'An error occurred', error: err.message });\r\n    }\r\n});\r\n\r\napp.post('/api/verify-user', async (req, res) => {\r\n    const { username } = req.body;\r\n\r\n    try {\r\n        const result = await sql.query`SELECT userID FROM users_data WHERE userName = ${username}`;\r\n        if (result.recordset.length > 0) {\r\n            res.status(200).send({ exists: true, userID: result.recordset[0].userID });\r\n        } else {\r\n            res.status(200).send({ exists: false });\r\n        }\r\n    } catch (err) {\r\n        console.error('Error verifying user:', err);\r\n        res.status(500).send({ message: 'An error occurred', error: err.message });\r\n    }\r\n});\r\n\r\n\r\napp.post('/create-group', async (req, res) => {\r\n    const { groupName, groupDescription, users } = req.body;\r\n    const groupID = sql.UniqueIdentifier();\r\n\r\n    try {\r\n        // Save the group to the groups_data table\r\n        const groupIDResult = await sql.query`SELECT NEXT VALUE FOR dbo.GroupIDSequence AS groupID`;\r\n        const groupID = groupIDResult.recordset[0].groupID;\r\n        const createdAt = new Date().toISOString();\r\n        await sql.query`INSERT INTO groups_data (groupID, groupName, groupDescription, createdAt) VALUES (${groupID}, ${groupName}, ${groupDescription}, ${createdAt})`;\r\n        console.log(users);\r\n        // Save the users to the group_user table\r\n        for (const user of users) {\r\n            await sql.query`INSERT INTO group_user (userID, groupID) VALUES (${user.userID}, ${groupID})`;\r\n        }\r\n\r\n         res.status(201).send({ message: 'Group created successfully', groupID, createdAt});\r\n    } catch (err) {\r\n        console.error('Error creating group:', err);\r\n        res.status(500).send({ message: 'An error occurred', error: err.message });\r\n    }\r\n});\r\n\r\n\r\napp.post('/join-group', async (req, res) => {\r\n    const { groupID, userName } = req.body; \r\n    console.log(userName);\r\n    try {\r\n        const userResult = await sql.query`SELECT userID FROM users_data WHERE userName = ${userName}`;\r\n        if (userResult.recordset.length === 0) {\r\n            return res.status(404).send({ message: 'User not found' });\r\n        }\r\n        const userID = userResult.recordset[0].userID;\r\n\r\n        const groupResult = await sql.query`SELECT * FROM groups_data WHERE groupID = ${groupID}`;\r\n        if (groupResult.recordset.length === 0) {\r\n            return res.status(404).send({ message: 'Group not found' });\r\n        }\r\n\r\n        const membershipResult = await sql.query`\r\n            SELECT * FROM group_user WHERE userID = ${userID} AND groupID = ${groupID}\r\n        `;\r\n        if (membershipResult.recordset.length > 0) {\r\n            return res.status(400).send({ message: 'User already belongs to this group' });\r\n        }\r\n\r\n        await sql.query`INSERT INTO group_user (userID, groupID) VALUES (${userID}, ${groupID})`;\r\n        res.status(200).send({ message: 'Successfully joined the group' });\r\n    } catch (err) {\r\n        console.error('Error joining group:', err);\r\n        res.status(500).send({ message: 'An error occurred', error: err.message });\r\n    }\r\n});\r\n\r\n\r\n\r\napp.post('/api/leave-group', async (req, res) => {\r\n    const { groupID, userID } = req.body;\r\n\r\n    try {\r\n        await sql.query`DELETE FROM group_user WHERE userID = ${userID} AND groupID = ${groupID}`;\r\n        res.status(200).send({ message: 'Successfully left the group' });\r\n    } catch (err) {\r\n        console.error('Error leaving group:', err);\r\n        res.status(500).send({ message: 'An error occurred', error: err.message });\r\n    }\r\n});\r\n\r\napp.get('/find-groups', async (req, res) => {\r\n    try {\r\n        const result = await sql.query`\r\n            SELECT g.*, COUNT(gu.userID) AS userCount\r\n            FROM groups_data g\r\n            JOIN group_user gu ON g.groupID = gu.groupID\r\n            GROUP BY g.groupID, g.groupName, g.groupDescription, g.createdAt\r\n            HAVING COUNT(gu.userID) > 0\r\n        `;\r\n        res.status(200).send({ groups: result.recordset });\r\n    } catch (err) {\r\n        console.error('Error finding groups:', err);\r\n        res.status(500).send({ message: 'An error occurred', error: err.message });\r\n    }\r\n});\r\n\r\n\r\n\r\n// Fetch the groups a user belongs to along with user counts\r\napp.get('/user-groups/:userID', async (req, res) => {\r\n    const { userID } = req.params;\r\n    \r\n    try {\r\n        // Log the incoming userID\r\n        console.log('Received userID:', userID);\r\n\r\n        // Ensure the pool is connected\r\n        await sql.connect(connectionString);\r\n\r\n        // Fetch the group IDs the user belongs to\r\n        const userGroupsResult = await sql.query`\r\n            SELECT groupID\r\n            FROM group_user\r\n            WHERE userID = ${userID}\r\n        `;\r\n\r\n        // Log the result of the user groups query\r\n        console.log('User groups result:', userGroupsResult.recordset);\r\n\r\n        const groupIDs = userGroupsResult.recordset.map(record => record.groupID);\r\n\r\n        // Log the extracted groupIDs\r\n        console.log('User groupIDs:', groupIDs);\r\n\r\n        if (groupIDs.length === 0) {\r\n            return res.status(200).json([]); // User belongs to no groups\r\n        }\r\n\r\n        // Dynamically construct the SQL query for group details using parameterized queries\r\n        let groupIDPlaceholders = groupIDs.map((id, index) => `@groupID${index}`).join(',');\r\n        let request = new sql.Request();\r\n        groupIDs.forEach((id, index) => {\r\n            request.input(`groupID${index}`, sql.Int, id); // Treat groupID as integer\r\n        });\r\n\r\n        const groupsDataQuery = `\r\n            SELECT groupID, groupName, groupDescription, createdAt\r\n            FROM groups_data\r\n            WHERE groupID IN (${groupIDPlaceholders})\r\n        `;\r\n        const groupsDataResult = await request.query(groupsDataQuery);\r\n\r\n        // Log the result of the groups data query\r\n        console.log('Groups data result:', groupsDataResult.recordset);\r\n\r\n        const groupsData = groupsDataResult.recordset;\r\n\r\n        // Fetch the number of users in each group\r\n        const groupsWithUserCounts = await Promise.all(groupsData.map(async group => {\r\n            try {\r\n                const userCountResult = await sql.query`\r\n                    SELECT COUNT(*) as userCount\r\n                    FROM group_user\r\n                    WHERE groupID = ${group.groupID}\r\n                `;\r\n\r\n                // Log the user count for each group\r\n                console.log(`User count for group ${group.groupID}:`, userCountResult.recordset[0].userCount);\r\n\r\n                const userCount = userCountResult.recordset[0].userCount;\r\n                return {\r\n                    ...group,\r\n                    userCount\r\n                };\r\n            } catch (err) {\r\n                console.error(`Error fetching user count for group ${group.groupID}:`, err);\r\n                throw err;\r\n            }\r\n        }));\r\n\r\n        console.log('Final groups data with user counts:', groupsWithUserCounts);\r\n        res.status(200).json(groupsWithUserCounts);\r\n    } catch (err) {\r\n        console.error('Error fetching user groups:', err);\r\n        res.status(500).send({ message: 'An error occurred', error: err.message });\r\n    }\r\n});\r\n\r\n// Endpoint to remove a user from a group\r\napp.post('/leave-group', async (req, res) => {\r\n    const { userID, groupID } = req.body;\r\n\r\n    try {\r\n        // Ensure the pool is connected\r\n        await sql.connect(connectionString);\r\n\r\n        // Delete the user from the group\r\n        const result = await sql.query`\r\n            DELETE FROM group_user \r\n            WHERE userID = ${userID} AND groupID = ${groupID}\r\n        `;\r\n\r\n        if (result.rowsAffected[0] > 0) {\r\n            res.status(200).send({ message: 'Successfully left the group' });\r\n        } else {\r\n            res.status(404).send({ message: 'User or group not found' });\r\n        }\r\n    } catch (err) {\r\n        console.error('Error leaving group:', err);\r\n        res.status(500).send({ message: 'An error occurred', error: err.message });\r\n    }\r\n});\r\n\r\napp.post('/all-songs-by-artists', async (req, res) => {\r\n    const { selectedArtists } = req.body;\r\n    const artistNames = selectedArtists.map(artist => artist.name);\r\n\r\n    try {\r\n        const request = new sql.Request();\r\n        const artistPlaceholders = artistNames.map((_, index) => `@artist${index}`).join(',');\r\n        artistNames.forEach((artist, index) => {\r\n            request.input(`artist${index}`, sql.VarChar, artist);\r\n        });\r\n\r\n        const query = `\r\n            SELECT trackId AS id, trackName AS name, artistName\r\n            FROM songs_data\r\n            WHERE artistName IN (${artistPlaceholders})\r\n        `;\r\n\r\n        const result = await request.query(query);\r\n        res.status(200).json(result.recordset);\r\n    } catch (err) {\r\n        console.error('Error fetching songs by artists:', err);\r\n        res.status(500).send({ message: 'An error occurred', error: err.message });\r\n    }\r\n});\r\n\r\napp.post('/top-songs-by-artists', async (req, res) => {\r\n    const { selectedArtists } = req.body;\r\n    const artistNames = selectedArtists.map(artist => artist.name);\r\n\r\n    try {\r\n        const request = new sql.Request();\r\n        const artistPlaceholders = artistNames.map((_, index) => `@artist${index}`).join(',');\r\n        artistNames.forEach((artist, index) => {\r\n            request.input(`artist${index}`, sql.VarChar, artist);\r\n        });\r\n\r\n        const query = `\r\n            SELECT s.trackId AS id, s.trackName AS name, s.artistName, COUNT(us.userId) AS playCount\r\n            FROM songs_data s\r\n            JOIN user_song us ON s.trackId = us.trackId\r\n            WHERE s.artistName IN (${artistPlaceholders})\r\n            GROUP BY s.trackId, s.trackName, s.artistName\r\n            ORDER BY playCount DESC\r\n        `;\r\n\r\n        const result = await request.query(query);\r\n\r\n        const topSongs = [];\r\n        const artistSongCount = {};\r\n\r\n        result.recordset.forEach(song => {\r\n            if (!artistSongCount[song.artistName]) {\r\n                artistSongCount[song.artistName] = 0;\r\n            }\r\n            if (artistSongCount[song.artistName] < 5) {\r\n                topSongs.push(song);\r\n                artistSongCount[song.artistName] += 1;\r\n            }\r\n        });\r\n\r\n        res.status(200).json(topSongs);\r\n    } catch (err) {\r\n        console.error('Error fetching top songs by artists:', err);\r\n        res.status(500).send({ message: 'An error occurred', error: err.message });\r\n    }\r\n});\r\n\r\n// Endpoint to add user songs\r\napp.post('/add-user-songs', async (req, res) => {\r\n    const { username, songIDs } = req.body;\r\n\r\n    try {\r\n        // Fetch user ID based on username\r\n        const userResult = await sql.query`\r\n            SELECT userID FROM users_data WHERE userName = ${username}\r\n        `;\r\n        \r\n        if (userResult.recordset.length === 0) {\r\n            return res.status(404).send({ message: 'User not found' });\r\n        }\r\n\r\n        const userID = userResult.recordset[0].userID;\r\n\r\n        for (const songID of songIDs) {\r\n            await sql.query`\r\n                INSERT INTO user_song (userID, trackId)\r\n                VALUES (${userID}, ${songID})\r\n            `;\r\n        }\r\n\r\n        res.status(200).send({ message: 'Songs added to user successfully' });\r\n    } catch (err) {\r\n        console.error('Error adding user songs:', err);\r\n        res.status(500).send({ message: 'An error occurred', error: err.message });\r\n    }\r\n});\r\n\r\n// Endpoint to get playlist for a user\r\napp.get('/userPlaylist/:userID', async (req, res) => {\r\n    const { userID } = req.params;\r\n\r\n    try {\r\n        // Fetch trackIds based on userID from user_song table\r\n        const userSongsResult = await sql.query`\r\n            SELECT trackId \r\n            FROM user_song \r\n            WHERE userId = ${userID}\r\n        `;\r\n\r\n        if (userSongsResult.recordset.length === 0) {\r\n            return res.status(404).send({ message: 'No songs found for this user' });\r\n        }\r\n\r\n        const trackIds = userSongsResult.recordset.map(row => row.trackId);\r\n\r\n        // Fetch trackName and artistName based on trackIds from songs_data table\r\n        const songsResult = await sql.query`\r\n            SELECT trackName, artistName \r\n            FROM songs_data \r\n            WHERE trackId IN (${trackIds})\r\n        `;\r\n\r\n        const songs = songsResult.recordset.map(song => ({\r\n            name: song.trackName,\r\n            artist: song.artistName,\r\n        }));\r\n\r\n        res.status(200).send({ songs });\r\n    } catch (err) {\r\n        console.error('Error fetching user playlist:', err);\r\n        res.status(500).send({ message: 'An error occurred', error: err.message });\r\n    }\r\n});\r\n\r\napp.get('/checkUserSongs', async (req, res) => {\r\n    const { username } = req.query;\r\n\r\n    try {\r\n        // Find the user ID based on the username\r\n        const userResult = await sql.query`SELECT userID FROM users_data WHERE userName = ${username}`;\r\n        \r\n        if (userResult.recordset.length === 0) {\r\n            return res.status(404).send({ message: 'User not found' });\r\n        }\r\n\r\n        const userID = userResult.recordset[0].userID;\r\n\r\n        // Check if the user has songs\r\n        const songResult = await sql.query`SELECT COUNT(*) AS songCount FROM user_song WHERE userID = ${userID}`;\r\n\r\n        if (songResult.recordset[0].songCount > 0) {\r\n            res.json({ hasSongs: true });\r\n        } else {\r\n            res.json({ hasSongs: false });\r\n        }\r\n    } catch (err) {\r\n        console.error('Error checking user songs:', err);\r\n        res.status(500).send({ message: 'An error occurred', error: err.message });\r\n    }\r\n});\r\n\r\n\r\napp.get('/test', async (req, res) => {\r\n    return res.json(\"test\")\r\n});\r\n\r\nconst PORT = process.env.PORT || 8081;\r\napp.listen(PORT, () => {\r\n    console.log(`Server is running on port ${PORT}`);\r\n});\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/server.js b/src/server.js
--- a/src/server.js	(revision 85397322cf3ea17692f376a34d61a9e8d4814d5d)
+++ b/src/server.js	(date 1719072728271)
@@ -4,6 +4,8 @@
 const cors = require('cors');
 const nodemailer = require('nodemailer');
 const bcrypt = require('bcrypt');
+const EmailVerifier = require('email-verifier');
+
 
 const app = express();
 app.use(bodyParser.json());
@@ -37,6 +39,7 @@
     }
 });
 
+
 app.post('/login', async (req, res) => {
     const {username, password} = req.body;
 
@@ -63,6 +66,7 @@
     const createdAt = new Date().toISOString(); // Get the current date and time in ISO format
 
     try {
+
         // Check if the username already exists
         const userResult = await sql.query`SELECT userID FROM users_data WHERE userName = ${username}`;
         if (userResult.recordset.length > 0) {
@@ -72,7 +76,7 @@
         const userIDResult = await sql.query`SELECT NEXT VALUE FOR dbo.UserIDSequence AS userID`;
         const userID = userIDResult.recordset[0].userID;
         // Insert the new user
-        await sql.query`INSERT INTO users_data (userID, firstName, lastName, userName, birthday, email, password, createdAt) 
+        await sql.query`INSERT INTO users_data (userID, firstName, lastName, userName, birthday, email, password, createdAt)
             VALUES (${userID}, ${firstName}, ${lastName}, ${username}, ${birthday}, ${email}, ${password}, ${createdAt})`;
         res.status(201).send({ message: 'Registration successful' });
     } catch (err) {
Index: package-lock.json
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/package-lock.json b/package-lock.json
--- a/package-lock.json	(revision 85397322cf3ea17692f376a34d61a9e8d4814d5d)
+++ b/package-lock.json	(date 1719066849309)
@@ -15,6 +15,7 @@
         "bcrypt": "^5.1.1",
         "body-parser": "^1.20.2",
         "cors": "^2.8.5",
+        "email-verifier": "^0.4.1",
         "express": "^4.19.2",
         "mssql": "^10.0.2",
         "nodemailer": "^6.9.13",
@@ -5942,6 +5943,22 @@
       "resolved": "https://registry.npmjs.org/asap/-/asap-2.0.6.tgz",
       "integrity": "sha512-BSHWgDSAiKs50o2Re8ppvp3seVHXSRM44cdSsT9FfNEUUZLOGWVCsiWaRPWM1Znn+mqZ1OfVZ3z3DWEzSp7hRA=="
     },
+    "node_modules/asn1": {
+      "version": "0.2.6",
+      "resolved": "https://registry.npmjs.org/asn1/-/asn1-0.2.6.tgz",
+      "integrity": "sha512-ix/FxPn0MDjeyJ7i/yoHGFt/EX6LyNbxSEhPPXODPL+KB0VPk86UYfL0lMdy+KCnv+fmvIzySwaK5COwqVbWTQ==",
+      "dependencies": {
+        "safer-buffer": "~2.1.0"
+      }
+    },
+    "node_modules/assert-plus": {
+      "version": "1.0.0",
+      "resolved": "https://registry.npmjs.org/assert-plus/-/assert-plus-1.0.0.tgz",
+      "integrity": "sha512-NfJ4UzBCcQGLDlQq7nHxH+tv3kyZ0hHQqF5BO6J7tNJeP5do1llPr8dZ8zHonfhAu0PHAdMkSo+8o0wxg9lZWw==",
+      "engines": {
+        "node": ">=0.8"
+      }
+    },
     "node_modules/ast-types-flow": {
       "version": "0.0.8",
       "resolved": "https://registry.npmjs.org/ast-types-flow/-/ast-types-flow-0.0.8.tgz",
@@ -6015,6 +6032,19 @@
         "url": "https://github.com/sponsors/ljharb"
       }
     },
+    "node_modules/aws-sign2": {
+      "version": "0.7.0",
+      "resolved": "https://registry.npmjs.org/aws-sign2/-/aws-sign2-0.7.0.tgz",
+      "integrity": "sha512-08kcGqnYf/YmjoRhfxyu+CLxBjUtHLXLXX/vUfx9l2LYzG3c1m61nrpyFUZI6zeS+Li/wWMMidD9KgrqtGq3mA==",
+      "engines": {
+        "node": "*"
+      }
+    },
+    "node_modules/aws4": {
+      "version": "1.13.0",
+      "resolved": "https://registry.npmjs.org/aws4/-/aws4-1.13.0.tgz",
+      "integrity": "sha512-3AungXC4I8kKsS9PuS4JH2nc+0bVY/mjgrephHTIi8fpEeGsTHBUJeosp0Wc1myYMElmD0B3Oc4XL/HVJ4PV2g=="
+    },
     "node_modules/axe-core": {
       "version": "4.7.0",
       "resolved": "https://registry.npmjs.org/axe-core/-/axe-core-4.7.0.tgz",
@@ -6334,6 +6364,17 @@
         "babel-plugin-transform-react-remove-prop-types": "^0.4.24"
       }
     },
+    "node_modules/backoff": {
+      "version": "2.5.0",
+      "resolved": "https://registry.npmjs.org/backoff/-/backoff-2.5.0.tgz",
+      "integrity": "sha512-wC5ihrnUXmR2douXmXLCe5O3zg3GKIyvRi/hi58a/XyRxVI+3/yM0PYueQOZXPXQ9pxBislYkw+sF9b7C/RuMA==",
+      "dependencies": {
+        "precond": "0.2"
+      },
+      "engines": {
+        "node": ">= 0.6"
+      }
+    },
     "node_modules/balanced-match": {
       "version": "1.0.2",
       "resolved": "https://registry.npmjs.org/balanced-match/-/balanced-match-1.0.2.tgz",
@@ -6376,6 +6417,14 @@
         "node": ">= 10.0.0"
       }
     },
+    "node_modules/bcrypt-pbkdf": {
+      "version": "1.0.2",
+      "resolved": "https://registry.npmjs.org/bcrypt-pbkdf/-/bcrypt-pbkdf-1.0.2.tgz",
+      "integrity": "sha512-qeFIXtP4MSoi6NLqO12WfqARWWuCKi2Rn/9hJLEmtB5yTNr9DqFWkJRCf2qShWzPeAMRnOgCrq0sg/KLv5ES9w==",
+      "dependencies": {
+        "tweetnacl": "^0.14.3"
+      }
+    },
     "node_modules/bfj": {
       "version": "7.1.0",
       "resolved": "https://registry.npmjs.org/bfj/-/bfj-7.1.0.tgz",
@@ -6718,6 +6767,11 @@
         "node": ">=4"
       }
     },
+    "node_modules/caseless": {
+      "version": "0.12.0",
+      "resolved": "https://registry.npmjs.org/caseless/-/caseless-0.12.0.tgz",
+      "integrity": "sha512-4tYFyifaFfGacoiObjJegolkwSU4xQNGbVgUiNYVUxbQ2x2lUsFvY4hVgVzGiIe6WLOPqycWXA40l+PWsxthUw=="
+    },
     "node_modules/chalk": {
       "version": "2.4.2",
       "resolved": "https://registry.npmjs.org/chalk/-/chalk-2.4.2.tgz",
@@ -7690,6 +7744,17 @@
       "resolved": "https://registry.npmjs.org/damerau-levenshtein/-/damerau-levenshtein-1.0.8.tgz",
       "integrity": "sha512-sdQSFB7+llfUcQHUQO3+B8ERRj0Oa4w9POWMI/puGtuf7gFywGmkaLCElnudfTiKZV+NvHqL0ifzdrI8Ro7ESA=="
     },
+    "node_modules/dashdash": {
+      "version": "1.14.1",
+      "resolved": "https://registry.npmjs.org/dashdash/-/dashdash-1.14.1.tgz",
+      "integrity": "sha512-jRFi8UDGo6j+odZiEpjazZaWqEal3w/basFjQHQEwVtZJGDpxbH1MeYluwCS8Xq5wmLJooDlMgvVarmWfGM44g==",
+      "dependencies": {
+        "assert-plus": "^1.0.0"
+      },
+      "engines": {
+        "node": ">=0.10"
+      }
+    },
     "node_modules/data-urls": {
       "version": "2.0.0",
       "resolved": "https://registry.npmjs.org/data-urls/-/data-urls-2.0.0.tgz",
@@ -8152,6 +8217,15 @@
       "resolved": "https://registry.npmjs.org/eastasianwidth/-/eastasianwidth-0.2.0.tgz",
       "integrity": "sha512-I88TYZWc9XiYHRQ4/3c5rjjfgkjhLyW2luGIheGERbNQ6OY7yTybanSpDXZa8y7VUP9YmDcYa+eyq4ca7iLqWA=="
     },
+    "node_modules/ecc-jsbn": {
+      "version": "0.1.2",
+      "resolved": "https://registry.npmjs.org/ecc-jsbn/-/ecc-jsbn-0.1.2.tgz",
+      "integrity": "sha512-eh9O+hwRHNbG4BLTjEl3nw044CkGm5X6LoaCf7LPp7UU8Qrt47JYNi6nPX8xjW97TKGKm1ouctg0QSpZe9qrnw==",
+      "dependencies": {
+        "jsbn": "~0.1.0",
+        "safer-buffer": "^2.1.0"
+      }
+    },
     "node_modules/ecdsa-sig-formatter": {
       "version": "1.0.11",
       "resolved": "https://registry.npmjs.org/ecdsa-sig-formatter/-/ecdsa-sig-formatter-1.0.11.tgz",
@@ -8184,6 +8258,15 @@
       "resolved": "https://registry.npmjs.org/electron-to-chromium/-/electron-to-chromium-1.4.722.tgz",
       "integrity": "sha512-5nLE0TWFFpZ80Crhtp4pIp8LXCztjYX41yUcV6b+bKR2PqzjskTMOOlBi1VjBHlvHwS+4gar7kNKOrsbsewEZQ=="
     },
+    "node_modules/email-verifier": {
+      "version": "0.4.1",
+      "resolved": "https://registry.npmjs.org/email-verifier/-/email-verifier-0.4.1.tgz",
+      "integrity": "sha512-WZAeqKgsGTCKfuvHimWTYF4Lix1sq7pUeDDAMLT1qrmo7iu8hgxGqZ+lTJn7SEL/RcYqXrjDL2U+NK3SWVkgFA==",
+      "dependencies": {
+        "backoff": "^2.5.0",
+        "request": "^2.82.0"
+      }
+    },
     "node_modules/emittery": {
       "version": "0.8.1",
       "resolved": "https://registry.npmjs.org/emittery/-/emittery-0.8.1.tgz",
@@ -9290,6 +9373,19 @@
       "resolved": "https://registry.npmjs.org/ms/-/ms-2.0.0.tgz",
       "integrity": "sha512-Tpp60P6IUJDTuOq/5Z8cdskzJujfwqfOTkrwIwj7IRISpnkJnT6SyJ4PCPnGMoFjC9ddhal5KVIYtAt97ix05A=="
     },
+    "node_modules/extend": {
+      "version": "3.0.2",
+      "resolved": "https://registry.npmjs.org/extend/-/extend-3.0.2.tgz",
+      "integrity": "sha512-fjquC59cD7CyW6urNXK0FBufkZcoiGG80wTuPujX590cB5Ttln20E2UB4S/WARVqhXffZl2LNgS+gQdPIIim/g=="
+    },
+    "node_modules/extsprintf": {
+      "version": "1.3.0",
+      "resolved": "https://registry.npmjs.org/extsprintf/-/extsprintf-1.3.0.tgz",
+      "integrity": "sha512-11Ndz7Nv+mvAC1j0ktTa7fAb0vLyGGX+rMHNBYQviQDGU0Hw7lhctJANqbPhu9nV9/izT/IntTgZ7Im/9LJs9g==",
+      "engines": [
+        "node >=0.6.0"
+      ]
+    },
     "node_modules/fast-deep-equal": {
       "version": "3.1.3",
       "resolved": "https://registry.npmjs.org/fast-deep-equal/-/fast-deep-equal-3.1.3.tgz",
@@ -9571,6 +9667,14 @@
         "url": "https://github.com/sponsors/isaacs"
       }
     },
+    "node_modules/forever-agent": {
+      "version": "0.6.1",
+      "resolved": "https://registry.npmjs.org/forever-agent/-/forever-agent-0.6.1.tgz",
+      "integrity": "sha512-j0KLYPhm6zeac4lz3oJ3o65qvgQCcPubiyotZrXqEaG4hNagNYO8qdlUrX5vwqv9ohqeT/Z3j6+yW067yWWdUw==",
+      "engines": {
+        "node": "*"
+      }
+    },
     "node_modules/fork-ts-checker-webpack-plugin": {
       "version": "6.5.3",
       "resolved": "https://registry.npmjs.org/fork-ts-checker-webpack-plugin/-/fork-ts-checker-webpack-plugin-6.5.3.tgz",
@@ -9958,6 +10062,14 @@
         "url": "https://github.com/sponsors/ljharb"
       }
     },
+    "node_modules/getpass": {
+      "version": "0.1.7",
+      "resolved": "https://registry.npmjs.org/getpass/-/getpass-0.1.7.tgz",
+      "integrity": "sha512-0fzj9JxOLfJ+XGLhR8ze3unN0KZCgZwiSSDz168VERjK8Wl8kVSdcu2kspd4s4wtAa1y/qrVRiAA0WclVsu0ng==",
+      "dependencies": {
+        "assert-plus": "^1.0.0"
+      }
+    },
     "node_modules/glob": {
       "version": "7.2.3",
       "resolved": "https://registry.npmjs.org/glob/-/glob-7.2.3.tgz",
@@ -10109,6 +10221,27 @@
       "resolved": "https://registry.npmjs.org/handle-thing/-/handle-thing-2.0.1.tgz",
       "integrity": "sha512-9Qn4yBxelxoh2Ow62nP+Ka/kMnOXRi8BXnRaUwezLNhqelnN49xKz4F/dPP8OYLxLxq6JDtZb2i9XznUQbNPTg=="
     },
+    "node_modules/har-schema": {
+      "version": "2.0.0",
+      "resolved": "https://registry.npmjs.org/har-schema/-/har-schema-2.0.0.tgz",
+      "integrity": "sha512-Oqluz6zhGX8cyRaTQlFMPw80bSJVG2x/cFb8ZPhUILGgHka9SsokCCOQgpveePerqidZOrT14ipqfJb7ILcW5Q==",
+      "engines": {
+        "node": ">=4"
+      }
+    },
+    "node_modules/har-validator": {
+      "version": "5.1.5",
+      "resolved": "https://registry.npmjs.org/har-validator/-/har-validator-5.1.5.tgz",
+      "integrity": "sha512-nmT2T0lljbxdQZfspsno9hgrG3Uir6Ks5afism62poxqBM6sDnMEuPmzTq8XN0OEwqKLLdh1jQI3qyE66Nzb3w==",
+      "deprecated": "this library is no longer supported",
+      "dependencies": {
+        "ajv": "^6.12.3",
+        "har-schema": "^2.0.0"
+      },
+      "engines": {
+        "node": ">=6"
+      }
+    },
     "node_modules/harmony-reflect": {
       "version": "1.6.2",
       "resolved": "https://registry.npmjs.org/harmony-reflect/-/harmony-reflect-1.6.2.tgz",
@@ -10439,6 +10572,20 @@
         }
       }
     },
+    "node_modules/http-signature": {
+      "version": "1.2.0",
+      "resolved": "https://registry.npmjs.org/http-signature/-/http-signature-1.2.0.tgz",
+      "integrity": "sha512-CAbnr6Rz4CYQkLYUtSNXxQPUH2gK8f3iWexVlsnMeD+GjlsQ0Xsy1cOX+mN3dtxYomRy21CiOzU8Uhw6OwncEQ==",
+      "dependencies": {
+        "assert-plus": "^1.0.0",
+        "jsprim": "^1.2.2",
+        "sshpk": "^1.7.0"
+      },
+      "engines": {
+        "node": ">=0.8",
+        "npm": ">=1.3.7"
+      }
+    },
     "node_modules/https-proxy-agent": {
       "version": "5.0.1",
       "resolved": "https://registry.npmjs.org/https-proxy-agent/-/https-proxy-agent-5.0.1.tgz",
@@ -11093,6 +11240,11 @@
       "resolved": "https://registry.npmjs.org/isexe/-/isexe-2.0.0.tgz",
       "integrity": "sha512-RHxMLp9lnKHGHRng9QFhRCMbYAcVpn69smSGcq3f36xjgVVWThj4qqLbTLlq7Ssj8B+fIQ1EuCEGI2lKsyQeIw=="
     },
+    "node_modules/isstream": {
+      "version": "0.1.2",
+      "resolved": "https://registry.npmjs.org/isstream/-/isstream-0.1.2.tgz",
+      "integrity": "sha512-Yljz7ffyPbrLpLngrMtZ7NduUgVvi6wG9RJ9IUcyCd59YQ911PBJphODUcbOVbqYfxe1wuYf/LJ8PauMRwsM/g=="
+    },
     "node_modules/istanbul-lib-coverage": {
       "version": "3.2.2",
       "resolved": "https://registry.npmjs.org/istanbul-lib-coverage/-/istanbul-lib-coverage-3.2.2.tgz",
@@ -13225,6 +13377,11 @@
       "resolved": "https://registry.npmjs.org/jsbi/-/jsbi-4.3.0.tgz",
       "integrity": "sha512-SnZNcinB4RIcnEyZqFPdGPVgrg2AcnykiBy0sHVJQKHYeaLUvi3Exj+iaPpLnFVkDPZIV4U0yvgC9/R4uEAZ9g=="
     },
+    "node_modules/jsbn": {
+      "version": "0.1.1",
+      "resolved": "https://registry.npmjs.org/jsbn/-/jsbn-0.1.1.tgz",
+      "integrity": "sha512-UVU9dibq2JcFWxQPA6KCqj5O42VOmAY3zQUfEKxU0KpTGXwNoCjkX1e13eHNvw/xPynt6pU0rZ1htjWTNTSXsg=="
+    },
     "node_modules/jsdom": {
       "version": "16.7.0",
       "resolved": "https://registry.npmjs.org/jsdom/-/jsdom-16.7.0.tgz",
@@ -13306,6 +13463,11 @@
       "resolved": "https://registry.npmjs.org/json-stable-stringify-without-jsonify/-/json-stable-stringify-without-jsonify-1.0.1.tgz",
       "integrity": "sha512-Bdboy+l7tA3OGW6FjyFHWkP5LuByj1Tk33Ljyq0axyzdk9//JSi2u3fP1QSmd1KNwq6VOKYGlAu87CisVir6Pw=="
     },
+    "node_modules/json-stringify-safe": {
+      "version": "5.0.1",
+      "resolved": "https://registry.npmjs.org/json-stringify-safe/-/json-stringify-safe-5.0.1.tgz",
+      "integrity": "sha512-ZClg6AaYvamvYEE82d3Iyd3vSSIjQ+odgjaTzRuO3s7toCdFKczob2i0zCh7JE8kWn17yvAWhUVxvqGwUalsRA=="
+    },
     "node_modules/json5": {
       "version": "2.2.3",
       "resolved": "https://registry.npmjs.org/json5/-/json5-2.2.3.tgz",
@@ -13398,6 +13560,20 @@
         "safe-buffer": "^5.0.1"
       }
     },
+    "node_modules/jsprim": {
+      "version": "1.4.2",
+      "resolved": "https://registry.npmjs.org/jsprim/-/jsprim-1.4.2.tgz",
+      "integrity": "sha512-P2bSOMAc/ciLz6DzgjVlGJP9+BrJWu5UDGK70C2iweC5QBIeFf0ZXRvGjEj2uYgrY2MkAAhsSWHDWlFtEroZWw==",
+      "dependencies": {
+        "assert-plus": "1.0.0",
+        "extsprintf": "1.3.0",
+        "json-schema": "0.4.0",
+        "verror": "1.10.0"
+      },
+      "engines": {
+        "node": ">=0.6.0"
+      }
+    },
     "node_modules/jsx-ast-utils": {
       "version": "3.3.5",
       "resolved": "https://registry.npmjs.org/jsx-ast-utils/-/jsx-ast-utils-3.3.5.tgz",
@@ -14208,6 +14384,14 @@
       "resolved": "https://registry.npmjs.org/nwsapi/-/nwsapi-2.2.7.tgz",
       "integrity": "sha512-ub5E4+FBPKwAZx0UwIQOjYWGHTEq5sPqHQNRN8Z9e4A7u3Tj1weLJsL59yH9vmvqEtBHaOmT6cYQKIZOxp35FQ=="
     },
+    "node_modules/oauth-sign": {
+      "version": "0.9.0",
+      "resolved": "https://registry.npmjs.org/oauth-sign/-/oauth-sign-0.9.0.tgz",
+      "integrity": "sha512-fexhUFFPTGV8ybAtSIGbV6gOkSv8UtRbDBnAyLQw4QPKkgNlsH2ByPGtMUqdWkos6YCRmAqViwgZrJc/mRDzZQ==",
+      "engines": {
+        "node": "*"
+      }
+    },
     "node_modules/object-assign": {
       "version": "4.1.1",
       "resolved": "https://registry.npmjs.org/object-assign/-/object-assign-4.1.1.tgz",
@@ -15987,6 +16171,14 @@
       "resolved": "https://registry.npmjs.org/postcss-value-parser/-/postcss-value-parser-4.2.0.tgz",
       "integrity": "sha512-1NNCs6uurfkVbeXG4S8JFT9t19m45ICnif8zWLd5oPSZ50QnwMfK+H3jv408d4jw/7Bttv5axS5IiHoLaVNHeQ=="
     },
+    "node_modules/precond": {
+      "version": "0.2.3",
+      "resolved": "https://registry.npmjs.org/precond/-/precond-0.2.3.tgz",
+      "integrity": "sha512-QCYG84SgGyGzqJ/vlMsxeXd/pgL/I94ixdNFyh1PusWmTCyVfPJjZ1K1jvHtsbfnXQs2TSkEP2fR7QiMZAnKFQ==",
+      "engines": {
+        "node": ">= 0.6"
+      }
+    },
     "node_modules/prelude-ls": {
       "version": "1.2.1",
       "resolved": "https://registry.npmjs.org/prelude-ls/-/prelude-ls-1.2.1.tgz",
@@ -16726,6 +16918,79 @@
         "strip-ansi": "^6.0.1"
       }
     },
+    "node_modules/request": {
+      "version": "2.88.2",
+      "resolved": "https://registry.npmjs.org/request/-/request-2.88.2.tgz",
+      "integrity": "sha512-MsvtOrfG9ZcrOwAW+Qi+F6HbD0CWXEh9ou77uOb7FM2WPhwT7smM833PzanhJLsgXjN89Ir6V2PczXNnMpwKhw==",
+      "deprecated": "request has been deprecated, see https://github.com/request/request/issues/3142",
+      "dependencies": {
+        "aws-sign2": "~0.7.0",
+        "aws4": "^1.8.0",
+        "caseless": "~0.12.0",
+        "combined-stream": "~1.0.6",
+        "extend": "~3.0.2",
+        "forever-agent": "~0.6.1",
+        "form-data": "~2.3.2",
+        "har-validator": "~5.1.3",
+        "http-signature": "~1.2.0",
+        "is-typedarray": "~1.0.0",
+        "isstream": "~0.1.2",
+        "json-stringify-safe": "~5.0.1",
+        "mime-types": "~2.1.19",
+        "oauth-sign": "~0.9.0",
+        "performance-now": "^2.1.0",
+        "qs": "~6.5.2",
+        "safe-buffer": "^5.1.2",
+        "tough-cookie": "~2.5.0",
+        "tunnel-agent": "^0.6.0",
+        "uuid": "^3.3.2"
+      },
+      "engines": {
+        "node": ">= 6"
+      }
+    },
+    "node_modules/request/node_modules/form-data": {
+      "version": "2.3.3",
+      "resolved": "https://registry.npmjs.org/form-data/-/form-data-2.3.3.tgz",
+      "integrity": "sha512-1lLKB2Mu3aGP1Q/2eCOx0fNbRMe7XdwktwOruhfqqd0rIJWwN4Dh+E3hrPSlDCXnSR7UtZ1N38rVXm+6+MEhJQ==",
+      "dependencies": {
+        "asynckit": "^0.4.0",
+        "combined-stream": "^1.0.6",
+        "mime-types": "^2.1.12"
+      },
+      "engines": {
+        "node": ">= 0.12"
+      }
+    },
+    "node_modules/request/node_modules/qs": {
+      "version": "6.5.3",
+      "resolved": "https://registry.npmjs.org/qs/-/qs-6.5.3.tgz",
+      "integrity": "sha512-qxXIEh4pCGfHICj1mAJQ2/2XVZkjCDTcEgfoSQxc/fYivUZxTkk7L3bDBJSoNrEzXI17oUO5Dp07ktqE5KzczA==",
+      "engines": {
+        "node": ">=0.6"
+      }
+    },
+    "node_modules/request/node_modules/tough-cookie": {
+      "version": "2.5.0",
+      "resolved": "https://registry.npmjs.org/tough-cookie/-/tough-cookie-2.5.0.tgz",
+      "integrity": "sha512-nlLsUzgm1kfLXSXfRZMc1KLAugd4hqJHDTvc2hDIwS3mZAfMEuMbc03SujMF+GEcpaX/qboeycw6iO8JwVv2+g==",
+      "dependencies": {
+        "psl": "^1.1.28",
+        "punycode": "^2.1.1"
+      },
+      "engines": {
+        "node": ">=0.8"
+      }
+    },
+    "node_modules/request/node_modules/uuid": {
+      "version": "3.4.0",
+      "resolved": "https://registry.npmjs.org/uuid/-/uuid-3.4.0.tgz",
+      "integrity": "sha512-HjSDRw6gZE5JMggctHBcjVak08+KEVhSIiDzFnT9S9aegmp85S/bReBVTb4QTFaRNptJ9kuYaNhnbNEOkbKb/A==",
+      "deprecated": "Please upgrade  to version 7 or higher.  Older versions may use Math.random() in certain circumstances, which is known to be problematic.  See https://v8.dev/blog/math-random for details.",
+      "bin": {
+        "uuid": "bin/uuid"
+      }
+    },
     "node_modules/require-directory": {
       "version": "2.1.1",
       "resolved": "https://registry.npmjs.org/require-directory/-/require-directory-2.1.1.tgz",
@@ -17522,6 +17787,30 @@
       "resolved": "https://registry.npmjs.org/sprintf-js/-/sprintf-js-1.0.3.tgz",
       "integrity": "sha512-D9cPgkvLlV3t3IzL0D0YLvGA9Ahk4PcvVwUbN0dSGr1aP0Nrt4AEnTUbuGvquEC0mA64Gqt1fzirlRs5ibXx8g=="
     },
+    "node_modules/sshpk": {
+      "version": "1.18.0",
+      "resolved": "https://registry.npmjs.org/sshpk/-/sshpk-1.18.0.tgz",
+      "integrity": "sha512-2p2KJZTSqQ/I3+HX42EpYOa2l3f8Erv8MWKsy2I9uf4wA7yFIkXRffYdsx86y6z4vHtV8u7g+pPlr8/4ouAxsQ==",
+      "dependencies": {
+        "asn1": "~0.2.3",
+        "assert-plus": "^1.0.0",
+        "bcrypt-pbkdf": "^1.0.0",
+        "dashdash": "^1.12.0",
+        "ecc-jsbn": "~0.1.1",
+        "getpass": "^0.1.1",
+        "jsbn": "~0.1.0",
+        "safer-buffer": "^2.0.2",
+        "tweetnacl": "~0.14.0"
+      },
+      "bin": {
+        "sshpk-conv": "bin/sshpk-conv",
+        "sshpk-sign": "bin/sshpk-sign",
+        "sshpk-verify": "bin/sshpk-verify"
+      },
+      "engines": {
+        "node": ">=0.10.0"
+      }
+    },
     "node_modules/stable": {
       "version": "0.1.8",
       "resolved": "https://registry.npmjs.org/stable/-/stable-0.1.8.tgz",
@@ -18547,6 +18836,22 @@
       "resolved": "https://registry.npmjs.org/tslib/-/tslib-1.14.1.tgz",
       "integrity": "sha512-Xni35NKzjgMrwevysHTCArtLDpPvye8zV/0E4EyYn43P7/7qvQwPh9BGkHewbMulVntbigmcT7rdX3BNo9wRJg=="
     },
+    "node_modules/tunnel-agent": {
+      "version": "0.6.0",
+      "resolved": "https://registry.npmjs.org/tunnel-agent/-/tunnel-agent-0.6.0.tgz",
+      "integrity": "sha512-McnNiV1l8RYeY8tBgEpuodCC1mLUdbSN+CYBL7kJsJNInOP8UjDDEwdk6Mw60vdLLrr5NHKZhMAOSrR2NZuQ+w==",
+      "dependencies": {
+        "safe-buffer": "^5.0.1"
+      },
+      "engines": {
+        "node": "*"
+      }
+    },
+    "node_modules/tweetnacl": {
+      "version": "0.14.5",
+      "resolved": "https://registry.npmjs.org/tweetnacl/-/tweetnacl-0.14.5.tgz",
+      "integrity": "sha512-KXXFFdAbFXY4geFIwoyNK+f5Z1b7swfXABfL7HXCmoIWMKU3dmS26672A4EeQtDzLKy7SXmfBu51JolvEKwtGA=="
+    },
     "node_modules/type-check": {
       "version": "0.4.0",
       "resolved": "https://registry.npmjs.org/type-check/-/type-check-0.4.0.tgz",
@@ -18905,6 +19210,24 @@
         "node": ">= 0.8"
       }
     },
+    "node_modules/verror": {
+      "version": "1.10.0",
+      "resolved": "https://registry.npmjs.org/verror/-/verror-1.10.0.tgz",
+      "integrity": "sha512-ZZKSmDAEFOijERBLkmYfJ+vmk3w+7hOLYDNkRCuRuMJGEmqYNCNLyBBFwWKVMhfwaEF3WOd0Zlw86U/WC/+nYw==",
+      "engines": [
+        "node >=0.6.0"
+      ],
+      "dependencies": {
+        "assert-plus": "^1.0.0",
+        "core-util-is": "1.0.2",
+        "extsprintf": "^1.2.0"
+      }
+    },
+    "node_modules/verror/node_modules/core-util-is": {
+      "version": "1.0.2",
+      "resolved": "https://registry.npmjs.org/core-util-is/-/core-util-is-1.0.2.tgz",
+      "integrity": "sha512-3lqz5YjWTYnW6dlDa5TLaTCcShfar1e40rmcJVwCBJC6mWlFuj0eCHIElmG1g5kyuJ/GD+8Wn4FFCcz4gJPfaQ=="
+    },
     "node_modules/w3c-hr-time": {
       "version": "1.0.2",
       "resolved": "https://registry.npmjs.org/w3c-hr-time/-/w3c-hr-time-1.0.2.tgz",
@@ -24142,6 +24465,19 @@
       "resolved": "https://registry.npmjs.org/asap/-/asap-2.0.6.tgz",
       "integrity": "sha512-BSHWgDSAiKs50o2Re8ppvp3seVHXSRM44cdSsT9FfNEUUZLOGWVCsiWaRPWM1Znn+mqZ1OfVZ3z3DWEzSp7hRA=="
     },
+    "asn1": {
+      "version": "0.2.6",
+      "resolved": "https://registry.npmjs.org/asn1/-/asn1-0.2.6.tgz",
+      "integrity": "sha512-ix/FxPn0MDjeyJ7i/yoHGFt/EX6LyNbxSEhPPXODPL+KB0VPk86UYfL0lMdy+KCnv+fmvIzySwaK5COwqVbWTQ==",
+      "requires": {
+        "safer-buffer": "~2.1.0"
+      }
+    },
+    "assert-plus": {
+      "version": "1.0.0",
+      "resolved": "https://registry.npmjs.org/assert-plus/-/assert-plus-1.0.0.tgz",
+      "integrity": "sha512-NfJ4UzBCcQGLDlQq7nHxH+tv3kyZ0hHQqF5BO6J7tNJeP5do1llPr8dZ8zHonfhAu0PHAdMkSo+8o0wxg9lZWw=="
+    },
     "ast-types-flow": {
       "version": "0.0.8",
       "resolved": "https://registry.npmjs.org/ast-types-flow/-/ast-types-flow-0.0.8.tgz",
@@ -24183,6 +24519,16 @@
         "possible-typed-array-names": "^1.0.0"
       }
     },
+    "aws-sign2": {
+      "version": "0.7.0",
+      "resolved": "https://registry.npmjs.org/aws-sign2/-/aws-sign2-0.7.0.tgz",
+      "integrity": "sha512-08kcGqnYf/YmjoRhfxyu+CLxBjUtHLXLXX/vUfx9l2LYzG3c1m61nrpyFUZI6zeS+Li/wWMMidD9KgrqtGq3mA=="
+    },
+    "aws4": {
+      "version": "1.13.0",
+      "resolved": "https://registry.npmjs.org/aws4/-/aws4-1.13.0.tgz",
+      "integrity": "sha512-3AungXC4I8kKsS9PuS4JH2nc+0bVY/mjgrephHTIi8fpEeGsTHBUJeosp0Wc1myYMElmD0B3Oc4XL/HVJ4PV2g=="
+    },
     "axe-core": {
       "version": "4.7.0",
       "resolved": "https://registry.npmjs.org/axe-core/-/axe-core-4.7.0.tgz",
@@ -24430,6 +24776,14 @@
         "babel-plugin-transform-react-remove-prop-types": "^0.4.24"
       }
     },
+    "backoff": {
+      "version": "2.5.0",
+      "resolved": "https://registry.npmjs.org/backoff/-/backoff-2.5.0.tgz",
+      "integrity": "sha512-wC5ihrnUXmR2douXmXLCe5O3zg3GKIyvRi/hi58a/XyRxVI+3/yM0PYueQOZXPXQ9pxBislYkw+sF9b7C/RuMA==",
+      "requires": {
+        "precond": "0.2"
+      }
+    },
     "balanced-match": {
       "version": "1.0.2",
       "resolved": "https://registry.npmjs.org/balanced-match/-/balanced-match-1.0.2.tgz",
@@ -24454,6 +24808,14 @@
         "node-addon-api": "^5.0.0"
       }
     },
+    "bcrypt-pbkdf": {
+      "version": "1.0.2",
+      "resolved": "https://registry.npmjs.org/bcrypt-pbkdf/-/bcrypt-pbkdf-1.0.2.tgz",
+      "integrity": "sha512-qeFIXtP4MSoi6NLqO12WfqARWWuCKi2Rn/9hJLEmtB5yTNr9DqFWkJRCf2qShWzPeAMRnOgCrq0sg/KLv5ES9w==",
+      "requires": {
+        "tweetnacl": "^0.14.3"
+      }
+    },
     "bfj": {
       "version": "7.1.0",
       "resolved": "https://registry.npmjs.org/bfj/-/bfj-7.1.0.tgz",
@@ -24694,6 +25056,11 @@
       "resolved": "https://registry.npmjs.org/case-sensitive-paths-webpack-plugin/-/case-sensitive-paths-webpack-plugin-2.4.0.tgz",
       "integrity": "sha512-roIFONhcxog0JSSWbvVAh3OocukmSgpqOH6YpMkCvav/ySIV3JKg4Dc8vYtQjYi/UxpNE36r/9v+VqTQqgkYmw=="
     },
+    "caseless": {
+      "version": "0.12.0",
+      "resolved": "https://registry.npmjs.org/caseless/-/caseless-0.12.0.tgz",
+      "integrity": "sha512-4tYFyifaFfGacoiObjJegolkwSU4xQNGbVgUiNYVUxbQ2x2lUsFvY4hVgVzGiIe6WLOPqycWXA40l+PWsxthUw=="
+    },
     "chalk": {
       "version": "2.4.2",
       "resolved": "https://registry.npmjs.org/chalk/-/chalk-2.4.2.tgz",
@@ -25382,6 +25749,14 @@
       "resolved": "https://registry.npmjs.org/damerau-levenshtein/-/damerau-levenshtein-1.0.8.tgz",
       "integrity": "sha512-sdQSFB7+llfUcQHUQO3+B8ERRj0Oa4w9POWMI/puGtuf7gFywGmkaLCElnudfTiKZV+NvHqL0ifzdrI8Ro7ESA=="
     },
+    "dashdash": {
+      "version": "1.14.1",
+      "resolved": "https://registry.npmjs.org/dashdash/-/dashdash-1.14.1.tgz",
+      "integrity": "sha512-jRFi8UDGo6j+odZiEpjazZaWqEal3w/basFjQHQEwVtZJGDpxbH1MeYluwCS8Xq5wmLJooDlMgvVarmWfGM44g==",
+      "requires": {
+        "assert-plus": "^1.0.0"
+      }
+    },
     "data-urls": {
       "version": "2.0.0",
       "resolved": "https://registry.npmjs.org/data-urls/-/data-urls-2.0.0.tgz",
@@ -25719,6 +26094,15 @@
       "resolved": "https://registry.npmjs.org/eastasianwidth/-/eastasianwidth-0.2.0.tgz",
       "integrity": "sha512-I88TYZWc9XiYHRQ4/3c5rjjfgkjhLyW2luGIheGERbNQ6OY7yTybanSpDXZa8y7VUP9YmDcYa+eyq4ca7iLqWA=="
     },
+    "ecc-jsbn": {
+      "version": "0.1.2",
+      "resolved": "https://registry.npmjs.org/ecc-jsbn/-/ecc-jsbn-0.1.2.tgz",
+      "integrity": "sha512-eh9O+hwRHNbG4BLTjEl3nw044CkGm5X6LoaCf7LPp7UU8Qrt47JYNi6nPX8xjW97TKGKm1ouctg0QSpZe9qrnw==",
+      "requires": {
+        "jsbn": "~0.1.0",
+        "safer-buffer": "^2.1.0"
+      }
+    },
     "ecdsa-sig-formatter": {
       "version": "1.0.11",
       "resolved": "https://registry.npmjs.org/ecdsa-sig-formatter/-/ecdsa-sig-formatter-1.0.11.tgz",
@@ -25745,6 +26129,15 @@
       "resolved": "https://registry.npmjs.org/electron-to-chromium/-/electron-to-chromium-1.4.722.tgz",
       "integrity": "sha512-5nLE0TWFFpZ80Crhtp4pIp8LXCztjYX41yUcV6b+bKR2PqzjskTMOOlBi1VjBHlvHwS+4gar7kNKOrsbsewEZQ=="
     },
+    "email-verifier": {
+      "version": "0.4.1",
+      "resolved": "https://registry.npmjs.org/email-verifier/-/email-verifier-0.4.1.tgz",
+      "integrity": "sha512-WZAeqKgsGTCKfuvHimWTYF4Lix1sq7pUeDDAMLT1qrmo7iu8hgxGqZ+lTJn7SEL/RcYqXrjDL2U+NK3SWVkgFA==",
+      "requires": {
+        "backoff": "^2.5.0",
+        "request": "^2.82.0"
+      }
+    },
     "emittery": {
       "version": "0.8.1",
       "resolved": "https://registry.npmjs.org/emittery/-/emittery-0.8.1.tgz",
@@ -26561,6 +26954,16 @@
         }
       }
     },
+    "extend": {
+      "version": "3.0.2",
+      "resolved": "https://registry.npmjs.org/extend/-/extend-3.0.2.tgz",
+      "integrity": "sha512-fjquC59cD7CyW6urNXK0FBufkZcoiGG80wTuPujX590cB5Ttln20E2UB4S/WARVqhXffZl2LNgS+gQdPIIim/g=="
+    },
+    "extsprintf": {
+      "version": "1.3.0",
+      "resolved": "https://registry.npmjs.org/extsprintf/-/extsprintf-1.3.0.tgz",
+      "integrity": "sha512-11Ndz7Nv+mvAC1j0ktTa7fAb0vLyGGX+rMHNBYQviQDGU0Hw7lhctJANqbPhu9nV9/izT/IntTgZ7Im/9LJs9g=="
+    },
     "fast-deep-equal": {
       "version": "3.1.3",
       "resolved": "https://registry.npmjs.org/fast-deep-equal/-/fast-deep-equal-3.1.3.tgz",
@@ -26775,6 +27178,11 @@
         }
       }
     },
+    "forever-agent": {
+      "version": "0.6.1",
+      "resolved": "https://registry.npmjs.org/forever-agent/-/forever-agent-0.6.1.tgz",
+      "integrity": "sha512-j0KLYPhm6zeac4lz3oJ3o65qvgQCcPubiyotZrXqEaG4hNagNYO8qdlUrX5vwqv9ohqeT/Z3j6+yW067yWWdUw=="
+    },
     "fork-ts-checker-webpack-plugin": {
       "version": "6.5.3",
       "resolved": "https://registry.npmjs.org/fork-ts-checker-webpack-plugin/-/fork-ts-checker-webpack-plugin-6.5.3.tgz",
@@ -27036,6 +27444,14 @@
         "get-intrinsic": "^1.2.4"
       }
     },
+    "getpass": {
+      "version": "0.1.7",
+      "resolved": "https://registry.npmjs.org/getpass/-/getpass-0.1.7.tgz",
+      "integrity": "sha512-0fzj9JxOLfJ+XGLhR8ze3unN0KZCgZwiSSDz168VERjK8Wl8kVSdcu2kspd4s4wtAa1y/qrVRiAA0WclVsu0ng==",
+      "requires": {
+        "assert-plus": "^1.0.0"
+      }
+    },
     "glob": {
       "version": "7.2.3",
       "resolved": "https://registry.npmjs.org/glob/-/glob-7.2.3.tgz",
@@ -27147,6 +27563,20 @@
       "resolved": "https://registry.npmjs.org/handle-thing/-/handle-thing-2.0.1.tgz",
       "integrity": "sha512-9Qn4yBxelxoh2Ow62nP+Ka/kMnOXRi8BXnRaUwezLNhqelnN49xKz4F/dPP8OYLxLxq6JDtZb2i9XznUQbNPTg=="
     },
+    "har-schema": {
+      "version": "2.0.0",
+      "resolved": "https://registry.npmjs.org/har-schema/-/har-schema-2.0.0.tgz",
+      "integrity": "sha512-Oqluz6zhGX8cyRaTQlFMPw80bSJVG2x/cFb8ZPhUILGgHka9SsokCCOQgpveePerqidZOrT14ipqfJb7ILcW5Q=="
+    },
+    "har-validator": {
+      "version": "5.1.5",
+      "resolved": "https://registry.npmjs.org/har-validator/-/har-validator-5.1.5.tgz",
+      "integrity": "sha512-nmT2T0lljbxdQZfspsno9hgrG3Uir6Ks5afism62poxqBM6sDnMEuPmzTq8XN0OEwqKLLdh1jQI3qyE66Nzb3w==",
+      "requires": {
+        "ajv": "^6.12.3",
+        "har-schema": "^2.0.0"
+      }
+    },
     "harmony-reflect": {
       "version": "1.6.2",
       "resolved": "https://registry.npmjs.org/harmony-reflect/-/harmony-reflect-1.6.2.tgz",
@@ -27380,6 +27810,16 @@
         "micromatch": "^4.0.2"
       }
     },
+    "http-signature": {
+      "version": "1.2.0",
+      "resolved": "https://registry.npmjs.org/http-signature/-/http-signature-1.2.0.tgz",
+      "integrity": "sha512-CAbnr6Rz4CYQkLYUtSNXxQPUH2gK8f3iWexVlsnMeD+GjlsQ0Xsy1cOX+mN3dtxYomRy21CiOzU8Uhw6OwncEQ==",
+      "requires": {
+        "assert-plus": "^1.0.0",
+        "jsprim": "^1.2.2",
+        "sshpk": "^1.7.0"
+      }
+    },
     "https-proxy-agent": {
       "version": "5.0.1",
       "resolved": "https://registry.npmjs.org/https-proxy-agent/-/https-proxy-agent-5.0.1.tgz",
@@ -27788,6 +28228,11 @@
       "resolved": "https://registry.npmjs.org/isexe/-/isexe-2.0.0.tgz",
       "integrity": "sha512-RHxMLp9lnKHGHRng9QFhRCMbYAcVpn69smSGcq3f36xjgVVWThj4qqLbTLlq7Ssj8B+fIQ1EuCEGI2lKsyQeIw=="
     },
+    "isstream": {
+      "version": "0.1.2",
+      "resolved": "https://registry.npmjs.org/isstream/-/isstream-0.1.2.tgz",
+      "integrity": "sha512-Yljz7ffyPbrLpLngrMtZ7NduUgVvi6wG9RJ9IUcyCd59YQ911PBJphODUcbOVbqYfxe1wuYf/LJ8PauMRwsM/g=="
+    },
     "istanbul-lib-coverage": {
       "version": "3.2.2",
       "resolved": "https://registry.npmjs.org/istanbul-lib-coverage/-/istanbul-lib-coverage-3.2.2.tgz",
@@ -29348,6 +29793,11 @@
       "resolved": "https://registry.npmjs.org/jsbi/-/jsbi-4.3.0.tgz",
       "integrity": "sha512-SnZNcinB4RIcnEyZqFPdGPVgrg2AcnykiBy0sHVJQKHYeaLUvi3Exj+iaPpLnFVkDPZIV4U0yvgC9/R4uEAZ9g=="
     },
+    "jsbn": {
+      "version": "0.1.1",
+      "resolved": "https://registry.npmjs.org/jsbn/-/jsbn-0.1.1.tgz",
+      "integrity": "sha512-UVU9dibq2JcFWxQPA6KCqj5O42VOmAY3zQUfEKxU0KpTGXwNoCjkX1e13eHNvw/xPynt6pU0rZ1htjWTNTSXsg=="
+    },
     "jsdom": {
       "version": "16.7.0",
       "resolved": "https://registry.npmjs.org/jsdom/-/jsdom-16.7.0.tgz",
@@ -29412,6 +29862,11 @@
       "resolved": "https://registry.npmjs.org/json-stable-stringify-without-jsonify/-/json-stable-stringify-without-jsonify-1.0.1.tgz",
       "integrity": "sha512-Bdboy+l7tA3OGW6FjyFHWkP5LuByj1Tk33Ljyq0axyzdk9//JSi2u3fP1QSmd1KNwq6VOKYGlAu87CisVir6Pw=="
     },
+    "json-stringify-safe": {
+      "version": "5.0.1",
+      "resolved": "https://registry.npmjs.org/json-stringify-safe/-/json-stringify-safe-5.0.1.tgz",
+      "integrity": "sha512-ZClg6AaYvamvYEE82d3Iyd3vSSIjQ+odgjaTzRuO3s7toCdFKczob2i0zCh7JE8kWn17yvAWhUVxvqGwUalsRA=="
+    },
     "json5": {
       "version": "2.2.3",
       "resolved": "https://registry.npmjs.org/json5/-/json5-2.2.3.tgz",
@@ -29486,6 +29941,17 @@
         }
       }
     },
+    "jsprim": {
+      "version": "1.4.2",
+      "resolved": "https://registry.npmjs.org/jsprim/-/jsprim-1.4.2.tgz",
+      "integrity": "sha512-P2bSOMAc/ciLz6DzgjVlGJP9+BrJWu5UDGK70C2iweC5QBIeFf0ZXRvGjEj2uYgrY2MkAAhsSWHDWlFtEroZWw==",
+      "requires": {
+        "assert-plus": "1.0.0",
+        "extsprintf": "1.3.0",
+        "json-schema": "0.4.0",
+        "verror": "1.10.0"
+      }
+    },
     "jsx-ast-utils": {
       "version": "3.3.5",
       "resolved": "https://registry.npmjs.org/jsx-ast-utils/-/jsx-ast-utils-3.3.5.tgz",
@@ -30111,6 +30577,11 @@
       "resolved": "https://registry.npmjs.org/nwsapi/-/nwsapi-2.2.7.tgz",
       "integrity": "sha512-ub5E4+FBPKwAZx0UwIQOjYWGHTEq5sPqHQNRN8Z9e4A7u3Tj1weLJsL59yH9vmvqEtBHaOmT6cYQKIZOxp35FQ=="
     },
+    "oauth-sign": {
+      "version": "0.9.0",
+      "resolved": "https://registry.npmjs.org/oauth-sign/-/oauth-sign-0.9.0.tgz",
+      "integrity": "sha512-fexhUFFPTGV8ybAtSIGbV6gOkSv8UtRbDBnAyLQw4QPKkgNlsH2ByPGtMUqdWkos6YCRmAqViwgZrJc/mRDzZQ=="
+    },
     "object-assign": {
       "version": "4.1.1",
       "resolved": "https://registry.npmjs.org/object-assign/-/object-assign-4.1.1.tgz",
@@ -31183,6 +31654,11 @@
       "resolved": "https://registry.npmjs.org/postcss-value-parser/-/postcss-value-parser-4.2.0.tgz",
       "integrity": "sha512-1NNCs6uurfkVbeXG4S8JFT9t19m45ICnif8zWLd5oPSZ50QnwMfK+H3jv408d4jw/7Bttv5axS5IiHoLaVNHeQ=="
     },
+    "precond": {
+      "version": "0.2.3",
+      "resolved": "https://registry.npmjs.org/precond/-/precond-0.2.3.tgz",
+      "integrity": "sha512-QCYG84SgGyGzqJ/vlMsxeXd/pgL/I94ixdNFyh1PusWmTCyVfPJjZ1K1jvHtsbfnXQs2TSkEP2fR7QiMZAnKFQ=="
+    },
     "prelude-ls": {
       "version": "1.2.1",
       "resolved": "https://registry.npmjs.org/prelude-ls/-/prelude-ls-1.2.1.tgz",
@@ -31745,6 +32221,64 @@
         "strip-ansi": "^6.0.1"
       }
     },
+    "request": {
+      "version": "2.88.2",
+      "resolved": "https://registry.npmjs.org/request/-/request-2.88.2.tgz",
+      "integrity": "sha512-MsvtOrfG9ZcrOwAW+Qi+F6HbD0CWXEh9ou77uOb7FM2WPhwT7smM833PzanhJLsgXjN89Ir6V2PczXNnMpwKhw==",
+      "requires": {
+        "aws-sign2": "~0.7.0",
+        "aws4": "^1.8.0",
+        "caseless": "~0.12.0",
+        "combined-stream": "~1.0.6",
+        "extend": "~3.0.2",
+        "forever-agent": "~0.6.1",
+        "form-data": "~2.3.2",
+        "har-validator": "~5.1.3",
+        "http-signature": "~1.2.0",
+        "is-typedarray": "~1.0.0",
+        "isstream": "~0.1.2",
+        "json-stringify-safe": "~5.0.1",
+        "mime-types": "~2.1.19",
+        "oauth-sign": "~0.9.0",
+        "performance-now": "^2.1.0",
+        "qs": "~6.5.2",
+        "safe-buffer": "^5.1.2",
+        "tough-cookie": "~2.5.0",
+        "tunnel-agent": "^0.6.0",
+        "uuid": "^3.3.2"
+      },
+      "dependencies": {
+        "form-data": {
+          "version": "2.3.3",
+          "resolved": "https://registry.npmjs.org/form-data/-/form-data-2.3.3.tgz",
+          "integrity": "sha512-1lLKB2Mu3aGP1Q/2eCOx0fNbRMe7XdwktwOruhfqqd0rIJWwN4Dh+E3hrPSlDCXnSR7UtZ1N38rVXm+6+MEhJQ==",
+          "requires": {
+            "asynckit": "^0.4.0",
+            "combined-stream": "^1.0.6",
+            "mime-types": "^2.1.12"
+          }
+        },
+        "qs": {
+          "version": "6.5.3",
+          "resolved": "https://registry.npmjs.org/qs/-/qs-6.5.3.tgz",
+          "integrity": "sha512-qxXIEh4pCGfHICj1mAJQ2/2XVZkjCDTcEgfoSQxc/fYivUZxTkk7L3bDBJSoNrEzXI17oUO5Dp07ktqE5KzczA=="
+        },
+        "tough-cookie": {
+          "version": "2.5.0",
+          "resolved": "https://registry.npmjs.org/tough-cookie/-/tough-cookie-2.5.0.tgz",
+          "integrity": "sha512-nlLsUzgm1kfLXSXfRZMc1KLAugd4hqJHDTvc2hDIwS3mZAfMEuMbc03SujMF+GEcpaX/qboeycw6iO8JwVv2+g==",
+          "requires": {
+            "psl": "^1.1.28",
+            "punycode": "^2.1.1"
+          }
+        },
+        "uuid": {
+          "version": "3.4.0",
+          "resolved": "https://registry.npmjs.org/uuid/-/uuid-3.4.0.tgz",
+          "integrity": "sha512-HjSDRw6gZE5JMggctHBcjVak08+KEVhSIiDzFnT9S9aegmp85S/bReBVTb4QTFaRNptJ9kuYaNhnbNEOkbKb/A=="
+        }
+      }
+    },
     "require-directory": {
       "version": "2.1.1",
       "resolved": "https://registry.npmjs.org/require-directory/-/require-directory-2.1.1.tgz",
@@ -32322,6 +32856,22 @@
       "resolved": "https://registry.npmjs.org/sprintf-js/-/sprintf-js-1.0.3.tgz",
       "integrity": "sha512-D9cPgkvLlV3t3IzL0D0YLvGA9Ahk4PcvVwUbN0dSGr1aP0Nrt4AEnTUbuGvquEC0mA64Gqt1fzirlRs5ibXx8g=="
     },
+    "sshpk": {
+      "version": "1.18.0",
+      "resolved": "https://registry.npmjs.org/sshpk/-/sshpk-1.18.0.tgz",
+      "integrity": "sha512-2p2KJZTSqQ/I3+HX42EpYOa2l3f8Erv8MWKsy2I9uf4wA7yFIkXRffYdsx86y6z4vHtV8u7g+pPlr8/4ouAxsQ==",
+      "requires": {
+        "asn1": "~0.2.3",
+        "assert-plus": "^1.0.0",
+        "bcrypt-pbkdf": "^1.0.0",
+        "dashdash": "^1.12.0",
+        "ecc-jsbn": "~0.1.1",
+        "getpass": "^0.1.1",
+        "jsbn": "~0.1.0",
+        "safer-buffer": "^2.0.2",
+        "tweetnacl": "~0.14.0"
+      }
+    },
     "stable": {
       "version": "0.1.8",
       "resolved": "https://registry.npmjs.org/stable/-/stable-0.1.8.tgz",
@@ -33088,6 +33638,19 @@
         }
       }
     },
+    "tunnel-agent": {
+      "version": "0.6.0",
+      "resolved": "https://registry.npmjs.org/tunnel-agent/-/tunnel-agent-0.6.0.tgz",
+      "integrity": "sha512-McnNiV1l8RYeY8tBgEpuodCC1mLUdbSN+CYBL7kJsJNInOP8UjDDEwdk6Mw60vdLLrr5NHKZhMAOSrR2NZuQ+w==",
+      "requires": {
+        "safe-buffer": "^5.0.1"
+      }
+    },
+    "tweetnacl": {
+      "version": "0.14.5",
+      "resolved": "https://registry.npmjs.org/tweetnacl/-/tweetnacl-0.14.5.tgz",
+      "integrity": "sha512-KXXFFdAbFXY4geFIwoyNK+f5Z1b7swfXABfL7HXCmoIWMKU3dmS26672A4EeQtDzLKy7SXmfBu51JolvEKwtGA=="
+    },
     "type-check": {
       "version": "0.4.0",
       "resolved": "https://registry.npmjs.org/type-check/-/type-check-0.4.0.tgz",
@@ -33335,6 +33898,23 @@
       "resolved": "https://registry.npmjs.org/vary/-/vary-1.1.2.tgz",
       "integrity": "sha512-BNGbWLfd0eUPabhkXUVm0j8uuvREyTh5ovRa/dyow/BqAbZJyC+5fU+IzQOzmAKzYqYRAISoRhdQr3eIZ/PXqg=="
     },
+    "verror": {
+      "version": "1.10.0",
+      "resolved": "https://registry.npmjs.org/verror/-/verror-1.10.0.tgz",
+      "integrity": "sha512-ZZKSmDAEFOijERBLkmYfJ+vmk3w+7hOLYDNkRCuRuMJGEmqYNCNLyBBFwWKVMhfwaEF3WOd0Zlw86U/WC/+nYw==",
+      "requires": {
+        "assert-plus": "^1.0.0",
+        "core-util-is": "1.0.2",
+        "extsprintf": "^1.2.0"
+      },
+      "dependencies": {
+        "core-util-is": {
+          "version": "1.0.2",
+          "resolved": "https://registry.npmjs.org/core-util-is/-/core-util-is-1.0.2.tgz",
+          "integrity": "sha512-3lqz5YjWTYnW6dlDa5TLaTCcShfar1e40rmcJVwCBJC6mWlFuj0eCHIElmG1g5kyuJ/GD+8Wn4FFCcz4gJPfaQ=="
+        }
+      }
+    },
     "w3c-hr-time": {
       "version": "1.0.2",
       "resolved": "https://registry.npmjs.org/w3c-hr-time/-/w3c-hr-time-1.0.2.tgz",
Index: package.json
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>{\r\n  \"name\": \"groupit\",\r\n  \"version\": \"0.1.0\",\r\n  \"private\": true,\r\n  \"dependencies\": {\r\n    \"@testing-library/jest-dom\": \"^5.17.0\",\r\n    \"@testing-library/react\": \"^13.4.0\",\r\n    \"@testing-library/user-event\": \"^13.5.0\",\r\n    \"axios\": \"^1.7.2\",\r\n    \"bcrypt\": \"^5.1.1\",\r\n    \"body-parser\": \"^1.20.2\",\r\n    \"cors\": \"^2.8.5\",\r\n    \"express\": \"^4.19.2\",\r\n    \"mssql\": \"^10.0.2\",\r\n    \"nodemailer\": \"^6.9.13\",\r\n    \"react\": \"^18.2.0\",\r\n    \"react-dom\": \"^18.2.0\",\r\n    \"react-router-dom\": \"^6.22.3\",\r\n    \"react-scripts\": \"5.0.1\",\r\n    \"react-select\": \"^5.8.0\",\r\n    \"web-vitals\": \"^2.1.4\"\r\n  },\r\n  \"scripts\": {\r\n    \"start\": \"concurrently \\\"npm run start-server\\\" \\\"npm run start-client\\\" \",\r\n    \"start-server\": \"node src/server.js\",\r\n    \"start-client\": \"react-scripts start\",\r\n    \"build\": \"react-scripts build\",\r\n    \"test\": \"react-scripts test\",\r\n    \"eject\": \"react-scripts eject\"\r\n  },\r\n  \"eslintConfig\": {\r\n    \"extends\": [\r\n      \"react-app\",\r\n      \"react-app/jest\"\r\n    ]\r\n  },\r\n  \"browserslist\": {\r\n    \"production\": [\r\n      \">0.2%\",\r\n      \"not dead\",\r\n      \"not op_mini all\"\r\n    ],\r\n    \"development\": [\r\n      \"last 1 chrome version\",\r\n      \"last 1 firefox version\",\r\n      \"last 1 safari version\"\r\n    ]\r\n  },\r\n  \"devDependencies\": {\r\n    \"@babel/plugin-proposal-private-property-in-object\": \"^7.21.11\",\r\n    \"concurrently\": \"^8.2.2\"\r\n  }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/package.json b/package.json
--- a/package.json	(revision 85397322cf3ea17692f376a34d61a9e8d4814d5d)
+++ b/package.json	(date 1719066436974)
@@ -10,6 +10,7 @@
     "bcrypt": "^5.1.1",
     "body-parser": "^1.20.2",
     "cors": "^2.8.5",
+    "email-verifier": "^0.4.1",
     "express": "^4.19.2",
     "mssql": "^10.0.2",
     "nodemailer": "^6.9.13",
